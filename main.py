import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ stdout
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]  # –í—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –≤ stdout
)

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
def load_env_file():
    try:
        if os.path.exists('.env'):
            with open('.env', 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        os.environ[key] = value
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_env_file()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –∫—É–±–µ—Ä–Ω–µ—Ç–µ—Å–∞)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MTProxy –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–æ –í—å–µ—Ç–Ω–∞–º–µ
MTPROXY_HOST = os.getenv("MTPROXY_HOST", "t.segfault.net")
MTPROXY_PORT = int(os.getenv("MTPROXY_PORT", "8443"))
MTPROXY_SECRET = os.getenv("MTPROXY_SECRET", "PLACEHOLDER_SECRET")

# SOCKS5 Proxy –¥–ª—è Telegram (–¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω)
TELEGRAM_PROXY_ENABLED = os.getenv("TELEGRAM_PROXY_ENABLED", "false").lower() == "true"
TELEGRAM_PROXY_URL = os.getenv("TELEGRAM_PROXY_URL", "")

# ADB –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ADB_DEVICE_IP = os.getenv("ADB_DEVICE_IP", "10.0.0.159")
VIDEO_PATH = os.getenv("VIDEO_PATH", "/storage/self/primary/video/spa_noaudio.mp4")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è aiogram
def get_proxy_url():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ aiogram"""
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π Telegram –ø—Ä–æ–∫—Å–∏
        if TELEGRAM_PROXY_ENABLED and TELEGRAM_PROXY_URL:
            logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º SOCKS5 –ø—Ä–æ–∫—Å–∏: {TELEGRAM_PROXY_URL.split('@')[0]}@****")
            return TELEGRAM_PROXY_URL
        
        # Fallback –ø—Ä–æ–∫—Å–∏
        socks_proxy = os.getenv("SOCKS_PROXY")
        if socks_proxy:
            logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback SOCKS –ø—Ä–æ–∫—Å–∏: {socks_proxy}")
            return socks_proxy
            
        http_proxy = os.getenv("HTTP_PROXY")
        if http_proxy:
            logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –ø—Ä–æ–∫—Å–∏: {http_proxy}")
            return http_proxy
        
        # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        logger.info("üì° –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
async def create_bot_with_proxy():
    """–°–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–æ–∫—Å–∏
        proxy_url = get_proxy_url()
        
        if proxy_url:
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É aiogram
            bot = Bot(token=BOT_TOKEN, proxy=proxy_url)
            if TELEGRAM_PROXY_ENABLED:
                logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å SOCKS5 –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            else:
                logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ–∫—Å–∏")
            return bot
        else:
            # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            bot = Bot(token=BOT_TOKEN)
            logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            if not TELEGRAM_PROXY_ENABLED:
                logger.info("üí° –î–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_PROXY_ENABLED=true")
            return bot
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
bot = None
dp = Dispatcher()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
async def set_landscape(message: types.Message):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /set_landscape")
        await message.answer("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–ª—å–±–æ–º–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é...")
        process = await asyncio.create_subprocess_shell("adb shell settings put system user_rotation 1")
        await process.communicate()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        await message.answer("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∞–ª—å–±–æ–º–Ω—É—é.")
        logger.info("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∞–ª—å–±–æ–º–Ω—É—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
async def set_portrait(message: types.Message):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /set_portrait")
        await message.answer("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é...")
        process = await asyncio.create_subprocess_shell("adb shell settings put system user_rotation 0")
        await process.communicate()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        await message.answer("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é.")
        logger.info("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ
async def play_video(message: types.Message):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /play_video")
        await message.answer(f"–ó–∞–ø—É—Å–∫–∞—é –≤–∏–¥–µ–æ: {VIDEO_PATH}")
        process = await asyncio.create_subprocess_shell(
            f'adb shell am start -a android.intent.action.VIEW -d file://{VIDEO_PATH} -t video/mp4'
        )
        await process.communicate()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        await message.answer("–í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ.")
        logger.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–¥–µ–æ: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —á–µ—Ä–µ–∑ ADB
async def adb_connect(message: types.Message):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /adb_connect")
        await message.answer(f"–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø–æ –∞–¥—Ä–µ—Å—É {ADB_DEVICE_IP}...")
        process = await asyncio.create_subprocess_shell(f"adb connect {ADB_DEVICE_IP}")
        stdout, stderr = await process.communicate()
        if stdout:
            logger.info(f"ADB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {stdout.decode().strip()}")
            await message.answer(f"ADB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {stdout.decode().strip()}")
        if stderr:
            logger.error(f"–û—à–∏–±–∫–∞ ADB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {stderr.decode().strip()}")
            await message.answer(f"–û—à–∏–±–∫–∞ ADB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {stderr.decode().strip()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ ADB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ start
async def start_command(message: types.Message):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /start")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if TELEGRAM_PROXY_ENABLED and TELEGRAM_PROXY_URL:
            proxy_status = "üåê SOCKS5 –ø—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–µ–Ω (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–æ–π–¥–µ–Ω–∞)"
            proxy_info = f"–ü—Ä–æ–∫—Å–∏: `{TELEGRAM_PROXY_URL.split('@')[0]}@****`"
        elif os.getenv("SOCKS_PROXY"):
            proxy_status = "üåê SOCKS –ø—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–µ–Ω"
            proxy_info = f"–ü—Ä–æ–∫—Å–∏: `{os.getenv('SOCKS_PROXY')}`"
        else:
            proxy_status = "üì° –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            proxy_info = "–ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        
        welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ruby Bot!**

üåê **–°—Ç–∞—Ç—É—Å:** {proxy_status}
{proxy_info}

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/set_landscape` - –ê–ª—å–±–æ–º–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
‚Ä¢ `/set_portrait` - –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è  
‚Ä¢ `/play_video` - –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ
‚Ä¢ `/adb_connect` - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ADB
‚Ä¢ `/check_proxy` - –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏

üîó **MTProxy –¥–ª—è Telegram –∫–ª–∏–µ–Ω—Ç–∞:**
`tg://proxy?server={MTPROXY_HOST}&port={MTPROXY_PORT}&secret={MTPROXY_SECRET}`

‚öôÔ∏è **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
‚Ä¢ ADB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: `{ADB_DEVICE_IP}`
‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª: `{VIDEO_PATH}`
        """
        
        await message.answer(welcome_text, parse_mode="Markdown")
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏
async def check_proxy(message: types.Message):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /check_proxy")
        await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π Telegram –ø—Ä–æ–∫—Å–∏
        if TELEGRAM_PROXY_ENABLED and TELEGRAM_PROXY_URL:
            proxy_info = f"""
üåê **Telegram SOCKS5 –ü—Ä–æ–∫—Å–∏:**
üîó URL: `{TELEGRAM_PROXY_URL.split('@')[0]}@****`
‚úÖ –°—Ç–∞—Ç—É—Å: **–ê–∫—Ç–∏–≤–µ–Ω** 
üåç –î–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤: –í—å–µ—Ç–Ω–∞–º, –†–æ—Å—Å–∏—è, –ò—Ä–∞–Ω –∏ –¥—Ä.

üìä **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:**
‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª: SOCKS5 —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
‚Ä¢ –¢–∞–π–º–∞—É—Ç: 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
            """
        # Fallback –ø—Ä–æ–∫—Å–∏
        elif os.getenv("SOCKS_PROXY") or os.getenv("HTTP_PROXY"):
            fallback_proxy = os.getenv("SOCKS_PROXY") or os.getenv("HTTP_PROXY")
            proxy_info = f"""
üåê **Fallback –ü—Ä–æ–∫—Å–∏:**
üîó –ü—Ä–æ–∫—Å–∏: `{fallback_proxy}`
‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–µ–Ω

üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TELEGRAM_PROXY_URL –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            """
        else:
            proxy_info = f"""
üåê **–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
üì° **–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ** (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –í –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å

üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏:**
–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env —Ñ–∞–π–ª–µ:
```
TELEGRAM_PROXY_ENABLED=true
TELEGRAM_PROXY_URL=socks5://user:pass@server:port
```
            """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MTProxy –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        proxy_info += f"""

üì± **MTProxy –¥–ª—è Telegram –∫–ª–∏–µ–Ω—Ç–∞:**
üì° –°–µ—Ä–≤–µ—Ä: `{MTPROXY_HOST}`
üîå –ü–æ—Ä—Ç: `{MTPROXY_PORT}`
üîó –°—Å—ã–ª–∫–∞: `tg://proxy?server={MTPROXY_HOST}&port={MTPROXY_PORT}&secret={MTPROXY_SECRET}`
        """
        
        await message.answer(proxy_info, parse_mode="Markdown")
        logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram
async def set_commands(bot_instance):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MTProxy"),
        BotCommand(command="set_landscape", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª—å–±–æ–º–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é"),
        BotCommand(command="set_portrait", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é"),
        BotCommand(command="play_video", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ"),
        BotCommand(command="adb_connect", description="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —á–µ—Ä–µ–∑ ADB"),
        BotCommand(command="check_proxy", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏"),
    ]
    await bot_instance.set_my_commands(commands)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
async def main():
    global bot
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    bot = await create_bot_with_proxy()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    dp.message.register(start_command, Command("start"))
    dp.message.register(set_landscape, Command("set_landscape"))
    dp.message.register(set_portrait, Command("set_portrait"))
    dp.message.register(play_video, Command("play_video"))
    dp.message.register(adb_connect, Command("adb_connect"))
    dp.message.register(check_proxy, Command("check_proxy"))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ Telegram
    await set_commands(bot)

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    logger.info("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
